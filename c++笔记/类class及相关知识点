### c++笔记：类class及相关知识点  

class起到封装的作用，将不同的**函数或变量**封装在不同的类之下。<br/>

区别于结构体的封装<br/>

#### 1.三种访问类型  

内含三种访问类型，且格式为：

```c++
class 类名
{//大括号内的被成为  类体  
public:
//公有的数据和函数 
protected:
//保护的数据和函数
private:
//私有的数据和函数
};
```

例子有：

```c++
class Point{//例子：定义一个类用于一个点的使用
public://能用于外界使用的函数
    void Point_set(int x, int y) {...}//函数体省略
    void Point_move(int x, int y) {...}//函数体省略
    void Point_origin();//这里只是声明一个函数
    char Point_name[10];
private://表示相关属性，私有的
    int x_0;
    int y_0 = 10;//错误，不能在类中被显示的初始化
};

void Point::Point_origin() {
	cout << x_0 << y_0;//使用外部接口可以在类外对类内公有成员函数进行操作
}

void main() {
    Point P;
    cin >> P.Point_name;
    cout << P.x_0;//错误，外部函数对私有成员的访问都是非法的
    //此外还可以调用其中函数，略
}
```

关键字private、public、protected称为**访问权限修饰符**或**访问控制修饰符**，用于限制类成员的控制访问范围，如果没有使用，**默认为private**，这些关键字的声明顺序和次数都是任意的。

类中的成员具有不同的访问权限修饰符。 从访问权限上来讲,类的成员又分为公有的
(public)私有的(private)和保护的(protected)3类:

* 公有成员定义了类的外部接口,只有公有成员才能被用户程序直接访问;
* 私有成*员定义了类的内部使用的数据和函数,私有成员只能被自己所属类的成员函数
  及友元函数访问;
* 保护成员访问权限介于公有成员和私有成员之间,它在类的继承和派生中使用。

**除了静态数据成员外，不能在类中被显示的初始化**

#### 2.内联函数  

应对于宏函数，一种比较特殊的函数  

 **内联函数**有三种：  

（1）直接在类内部定义。<br/>（2）在类内部声明，加上inline关键字，在类外部定义。
<br/>（3）在类内部声明，在类外部定义，同时加上inline关键字。注意：此种情况下，内联函数的定义通常应该放在类定义的同一头文件中，而不是在源文件中。这是为了保证内联函数的定义在调用该函数的每个源文件中是可见的。  

**内联函数不是必须要inline，内联函数用于替代==宏函数==，仅适用于简单一点的函数，复杂函数会被编译器普通化**

（普通函数的调用必须将程序执行的顺序转移到函数所在地址中，执行完函数后，再返回到之前的地址；而内联函数则不需要这些步骤，它直接展开了）

#### 3.构造函数、析构函数、拷贝构造函数  

**构造函数**：是一个特殊的公共成员(public)函数，在创建类对象时会被自动调用，默认也是会存在的，即使没有编写。

* **函数名与类名相同，不允许有返回值**

* 作用：初始化类里定义的变量（类里任何变量不允许有初始值）
* 可以带参数，可以重载  
* 参数列表为空或所有参数都有默认值，被称为**默认构造函数 ** 

**析构函数**：类中一个用于清理对象的特殊成员函数，与构造函数相对，释放资源（如动态分配内存之后），自动调用  

* **函数名为类名前加一个取反符号"~"**，不允许有返回值  
* 作用：释放资源之类的清理工作  
* 不允许带参数，不能重载  

**拷贝构造函数**：一个特殊的构造函数，只有一个参数，且这个参数是对类对象的引用，其他特性同构造函数  

普通构造函数只在对象创建时被自动调用,而拷贝构造函数可以在下面3种情况下被自动调用。 

* 用类的已知对象定义该类的一个正在被创建的对象。 
* 对象作为函数的实参传递给函数形参。
* 对象作为函数返回值。

```c++
class Point{
    public:
    Point(int x,int y){//构造函数
        x_0 = x;
        y_0 = y;
    }
    ~ Point(){//析构函数
        
    }
    Point(const Point &point){//拷贝构造函数，固定格式:const
        
    }
    ...//其他省略
}
int main(){
    Point *P = new Point(5,500);
    return 0;
}
```



#### 3.4this指针 

（待更新）
